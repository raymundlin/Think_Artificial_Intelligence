# Source: "Think Artificial Intelligence" by Jerry Cuomo, 2024
# Purpose: Educational code examples from the book.
# Copyright © 2024 Jerry Cuomo. All rights reserved.
#
# This code was autogenerated by GPT-4, from the following prompt:
# Prompt: Regenerate the setup and definitions for AI lifecycle stages and corresponding personas.
#
# About: This script visualizes the AI lifecycle stages and their corresponding personas 
# using a directed graph. It employs Python's NetworkX and Matplotlib libraries for graph generation and visualization.
#
# Setup: Python installed with NetworkX and Matplotlib. Install using 'pip install networkx matplotlib'.

import matplotlib.pyplot as plt
import networkx as nx
from matplotlib.colors import LinearSegmentedColormap

# Create a colormap for yellow and blue shades
yellow_cmap = LinearSegmentedColormap.from_list("yellow_shades", ["#FFFFE0", "#FFD740"], N=6)
blue_cmap = LinearSegmentedColormap.from_list("blue_shades", ["#E0FFFF", "#8682B4"], N=6)

# Generate 6 shades for each color
yellow_shades = [yellow_cmap(i / 5) for i in range(6)]
blue_shades = [blue_cmap(i / 5) for i in range(6)]

# Assign colors based on node indices
node_colors = yellow_shades + blue_shades  # First 6 nodes yellow, next 6 blue

# Define AI Lifecycle stages and personas
# lifecycle_stages = ["Data Preparation", "Model Development", "Prompt Engineering", "Model Deployment", "Application Integration", "Ethical Compliance"]
lifecycle_stages = ["【資料準備】", "【模型開發】", "【提示工程】", "【模型部署】", "【應用整合】", "【倫理合規】"]
# personas = ["Data Engineer", "Data Scientist", "Prompt Engineer", "AIOps Engineer", "Application Developer", "AI Ethics Officer"]
personas = ["資料工程師", "資料科學家", "提示工程師", "AIOps工程師", "應用開發者", "AI倫理官"]

# Mapping stages to personas
lifecycle_pos = {stage: (i, 1) for i, stage in enumerate(lifecycle_stages)}
persona_pos = {persona: (i, 0) for i, persona in enumerate(personas)}

# Define colors for each stage and persona
# ['darkred', 'darkblue', 'darkgreen', 'darkorange', 'darkviolet', 'darkturquoise']
# ['lightcoral', 'lightblue', 'lightgreen', 'peachpuff', 'plum', 'paleturquoise']

# Prepare the graph
G_combined = nx.DiGraph()

# Add nodes for lifecycle stages and personas
for stage in lifecycle_stages:
    G_combined.add_node(stage)

for persona in personas:
    G_combined.add_node(persona)

# connect each stage to the next stage
for i in range(len(lifecycle_stages) - 1):
    G_combined.add_edge(lifecycle_stages[i], lifecycle_stages[i + 1])

# Connect each stage to its corresponding persona
for stage, persona in zip(lifecycle_stages, personas):
    G_combined.add_edge(persona, stage)

# Define the node size and font size
m = 4
node_size = 30000 * m
font_size = 15 * m

# Define the combined positions
combined_pos = {**lifecycle_pos, **persona_pos}
print(combined_pos)

# draw the graph on figure
fig = plt.figure(figsize=(60, 40))
ax = fig.add_subplot(111)
ax.set_aspect('equal')
ax.margins(0)  # Remove automatic margins
nx.draw(G_combined, combined_pos, with_labels=True, node_color=node_colors, font_color='black', width=5,
        node_size=node_size, font_size=font_size, node_shape='s', arrowsize=35, ax=ax)

plt.rcParams['font.sans-serif'] = ['Arial Unicode Ms']
plt.title("人工智慧生命週期與對應角色\n\n", fontsize=20 * m)

# Save the figure
plt.savefig('AI_LifecyclePersonasVisualization.png', format='png', dpi=fig.dpi, bbox_inches='tight')
# plt.show()

